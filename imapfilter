---------------
--  Options  --
---------------

options.timeout = 120
options.subscribe = true
options.expunge = true

----------------
--  Accounts  --
----------------
function main()
    account = IMAP {
      server = 'box.dasroot.net',
      username = 'chuck@dasroot.net',
      password = get_imap_password(".password.dasrootmail"),
      ssl = 'tls1'
    }

    -- save a list of all messages currently in there
    mails = account.INBOX:select_all()
    spam = account.Spam:select_all()

    --- move mailing lists from INBOX to correct folders
    move_mailing_lists(account,mails)

    --- Move Social feed from INBOX to correct folders
    move_social_notices(account, mails)

    --- Move Financial feed from INBOX to correct folders
    move_financial_email(account, mails)

    --- salvage social email from spam
    move_project_notices(account, mails)

    --- Salvage financial mail from spam
    move_financial_email(account, spam)

    --- salvage social email from spam
    move_social_notices(account, spam)

    -- Let spam rules run last - rule the roost with anti-spam
    handle_spammy_feeds(account, mails)

end


function move_mailing_lists(account, mails)
    -- JUJU
    move_if_to_contains(account, mails, "juju@lists.ubuntu.com", "ML/Juju")
    move_if_from_contains(account, mails, "juju@lists.ubuntu.com", "ML/Juju")
    move_if_cc_contains(account, mails, "juju@lists.ubuntu.com", "ML/Juju")

    -- WPLUG
    move_if_to_contains(account, mails, "@wplug.org", "ML/WPLUG")
    move_if_from_contains(account, mails, "@wplug.org", "ML/WPLUG")

    -- Docker
    move_if_from_contains(account, mails, "docker-user@", "ML/Docker")
    move_if_subject_contains(account, mails, "[docker]", "ML/Docker")
    move_if_to_contains(account, mails, "docker-user@googlegroups.com", "ML/Docker")

    -- Launchpad Users
    move_if_to_contains(account, mails, "launchpad-users@lists.launchpad.net", "ML/Launchpad")
    move_if_cc_contains(account, mails, "launchpad-users@lists.launchpad.net", "ML/Launchpad")
    move_if_subject_contains(account, mails, "[Launchpad Users]", "ML/Launchpad")

end

function move_financial_email(account, mails)
    -- Amazon
    move_if_from_contains(account, mails, "@mail.synchronybank.com", "Financial/CC")

    -- BestBuy
    move_if_subject_contains(account, mails, "Your My Best Buy", "Financial/CC")

    -- Newegg
    move_if_subject_contains(account, mails, "Newegg Preferred Account", "Financial/CC")

    -- Paypal
    move_if_from_contains(account, mails, "@paypal.com", "Financial/Paypal")

    -- Fandango
    move_if_from_contains(account, mails, "@trx.fandangopurchase.com", "Financial/ReceiptFeed")

    -- Pizzahut
    move_if_from_contains(account, mails, "@orders.pizzahut.com", "Financial/ReceiptFeed")

    -- Student Loans
    move_if_subject_contains(account, mails, "Student Loan Payment", "Financial/StudentLoan")

    -- Music Purchases
    move_if_subject_contains(account, mails, "Bandcamp", "Financial/Music")
    move_if_from_contains(account, mails, "noreply@bandcamp.com", "Financial/Music")


end

function move_project_notices(account, mails)
    -- Github
    move_if_from_contains(account, mails, "@github.com", "Projects/Github")
    -- trello
    move_if_from_contains(account, mails, "@trello.com", "Projects/Trello")
end

function move_social_notices(account, mails)
    -- google-plus
    move_if_from_contains(account, mails, "@plus.google.com", "Social/Google-Plus")

    -- Keybase
    move_if_from_contains(account, mails, "@keybase.io", "Social/Keybase")

    -- linkedin
    move_if_from_contains(account, mails, "@linkedin.com", "Social/Linkedin")

    -- meetup
    move_if_from_contains(account, mails, "info@meetup.com", "Social/Meetup")

    -- mixcloud
    move_if_from_contains(account, mails, "noreply@mixcloudmail.com", "Social/Mixcloud")

    -- soundcloud
    move_if_from_contains(account, mails, "@soundcloud.com", "Social/Soundcloud")

    -- twitter
    move_if_from_contains(account, mails, "@twitter.com", "Social/Twitter")

    -- youtube
    move_if_from_contains(account, mails, "@youtube.com", "Social/Youtube")

end

function handle_spammy_feeds(account, mails)
   -- Dunhams
    delete_mail_from(account, mails, "discounts@dunhamsrewards.com")
   -- Groupon
    delete_mail_from(account, mails, "@groupon.com")
    delete_mail_from(account, mails, "@r.groupon.com")
   -- twilio
    delete_mail_from(account, mails, "news@twilio.com")
   -- Stumbleupon
    delete_mail_from(account, mails, "@mail.stumblemail.net")
   -- Ansible
   move_if_from_contains(account, mails, "@ansible.com", "Spam")
   -- Pinterest, dont ask
   delete_mail_from(account, mails, "@pinterest.com")

   -- Old product notices that we no longer care about
   move_if_from_contains(account, mails, "@parallels-universe.com", "Spam")
   move_if_from_contains(account, mails, "@graffletopia.com", "Spam")

end


-- -------------------------------
-- Utility Methods
-- -------------------------------

function move_if_subject_contains(account, mails, subject, mailbox)
    filtered = mails:contain_subject(subject)
    filtered:move_messages(account[mailbox]);
end

function move_if_to_contains(account, mails, to, mailbox)
    filtered = mails:contain_to(to)
    filtered:move_messages(account[mailbox])
end

function move_if_from_contains(account, mails, from, mailbox)
    filtered = mails:contain_from(from)
    filtered:move_messages(account[mailbox])
end

function move_if_cc_contains(account, mails, cc, mailbox)
    filtered = mails:contain_cc(cc)
    filtered:move_messages(account[mailbox])
end



function delete_mail_from(account, mails, from)
    filtered = mails:contain_from(from)
    filtered:delete_messages()
end

function delete_mail_if_subject_contains(account, mails, subject)
    filtered = mails:contain_subject(from)
    filtered:delete_messages()
end

function get_imap_password(file)
    local home = os.getenv("HOME")
    local file = home .. "/" .. file
    local str = io.open(file, 'r'):read()
    return str;
end

main()
